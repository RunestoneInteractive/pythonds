<?xml version="1.0"?>
<section xml:id="graphs_implementation">
  <title>Implementation</title>
  <p>Using dictionaries, it is easy to implement the adjacency list in
            Python. In our implementation of the graph abstract data type we will
            create two classes:
            <c>Vertex</c>, which will represent each vertex in the graph
            (see <xref ref="lst-vertex"/>) and
            <c>Graph</c>, which holds the master list of vertices (see <xref ref="lst-graph"/>).</p>
  <p>Each <c>Vertex</c> uses a dictionary to keep track of the vertices to which
            it is connected and the weight of each edge. This dictionary is called
            <c>neighbors</c>. The listing below shows the code for the <c>Vertex</c>
            class. The constructor simply initializes the <c>key</c>, which will
            typically be a string, and the <c>neighbors</c> dictionary. The
            <c>set_neighbor</c> method is used to add a connection from this vertex to
            another. The <c>get_neighbors</c> method returns all of the vertices in
            the adjacency list, as represented by the <c>neighbors</c> instance
            variable. The <c>get_neighbor</c> method returns the weight of the edge from
            this vertex to the vertex passed as a parameter.</p>
  <p xml:id="graphs_lst-vertex" names="lst_vertex">
    <term>Listing 1</term>
  </p>
  <pre>class Vertex:
    def __init__(self, key):
        self.key = key
        self.neighbors = {}

    def get_neighbor(self, other):
        return self.neighbors.get(other, None)

    def set_neighbor(self, other, weight=0):
        self.neighbors[other] = weight

    def __repr__(self):
        return f"Vertex({self.key})"

    def __str__(self):
        return (
            str(self.key)
            + " connected to: "
            + str([x.key for x in self.neighbors])
        )

    def get_neighbors(self):
        return self.neighbors.keys()

    def get_key(self):
        return self.key</pre>
  <p>The <c>Graph</c> class, shown in the next listing, contains a dictionary
            that maps vertex names to vertex objects. In <xref ref="graphs_an-adjacency-list"/> this
            dictionary object is represented by the shaded gray box. <c>Graph</c> also
            provides methods for adding vertices to a graph and connecting one
            vertex to another. The <c>get_vertices</c> method returns the names of all
            of the vertices in the graph. In addition, we have implemented the
            <c>__iter__</c> method to make it easy to iterate over all the vertex
            objects in a particular graph. Together, the two methods allow you to
            iterate over the vertices in a graph by name, or by the objects
            themselves.</p>
  <p xml:id="graphs_lst-graph" names="lst_graph">
    <term>Listing 2</term>
  </p>
  <pre>class Graph:
    def __init__(self):
        self.vertices = {}

    def set_vertex(self, key):
        self.vertices[key] = Vertex(key)

    def get_vertex(self, key):
        return self.vertices.get(key, None)

    def __contains__(self, key):
        return key in self.vertices

    def add_edge(self, from_vert, to_vert, weight=0):
        if from_vert not in self.vertices:
            self.set_vertex(from_vert)
        if to_vert not in self.vertices:
            self.set_vertex(to_vert)
        self.vertices[from_vert].set_neighbor(self.vertices[to_vert], weight)

    def get_vertices(self):
        return self.vertices.keys()

    def __iter__(self):
        return iter(self.vertices.values())</pre>
  <p>Using the <c>Graph</c> and <c>Vertex</c> classes just defined, the following
            Python session creates the graph in <xref ref="graphs_vocabularyand-definitions"/>. First we
            create six vertices numbered 0 through 5. Then we display the vertex
            dictionary. Notice that for each key 0 through 5 we have created an
            instance of a <c>Vertex</c>. Next, we add the edges that connect the
            vertices together. Finally, a nested loop verifies that each edge in the
            graph is properly stored. You should check the output of the edge list
            at the end of this session against <xref ref="graphs_vocabularyand-definitions"/>.</p>
  <pre>&gt;&gt;&gt; g = Graph()
&gt;&gt;&gt; for i in range(6):
...     g.set_vertex(i)
&gt;&gt;&gt; g.vertices
{0: Vertex(0), 1: Vertex(1), 2: Vertex(2), 3: Vertex(3), 4: Vertex(4), 5: Vertex(5)}
&gt;&gt;&gt; g.add_edge(0, 1, 5)
&gt;&gt;&gt; g.add_edge(0, 5, 2)
&gt;&gt;&gt; g.add_edge(1, 2, 4)
&gt;&gt;&gt; g.add_edge(2, 3, 9)
&gt;&gt;&gt; g.add_edge(3, 4, 7)
&gt;&gt;&gt; g.add_edge(3, 5, 3)
&gt;&gt;&gt; g.add_edge(4, 0, 1)
&gt;&gt;&gt; g.add_edge(5, 4, 8)
&gt;&gt;&gt; g.add_edge(5, 2, 1)
&gt;&gt;&gt; for v in g:
...     for w in v.get_neighbors():
...         print("f({v.get_key()}, {w.get_key()})")
...
(0, 1)
(0, 5)
(1, 2)
(2, 3)
(3, 4)
(3, 5)
(4, 0)
(5, 4)
(5, 2)</pre>
</section>
