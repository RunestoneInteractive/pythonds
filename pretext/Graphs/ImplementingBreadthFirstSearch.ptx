<?xml version="1.0"?>
<section xml:id="graphs_implementing-breadth-first-search">
  <title>Implementing Breadth-First Search</title>
  <p>With the graph constructed we can now turn our attention to the
            algorithm we will use to find the shortest solution to the word ladder
            problem. The graph algorithm we are going to use is called the
            <term>breadth-first search</term> (<term>BFS</term>), and it is one of
            the easiest algorithms for searching a graph. It also serves as a
            prototype for several other important graph algorithms that we will
            study later.</p>
  <p>Given a starting vertex <m>s</m> of a graph <m>G</m>, a breadth
            first search proceeds by exploring edges in the graph to find all the
            vertices in <m>G</m> for which there is a path from <m>s</m>. The
            remarkable thing about a breadth-first search is that it finds <em>all</em> the
            vertices that are a distance <m>k</m> from <m>s</m> before it
            finds <em>any</em> vertices that are a distance <m>k+1</m>. One good way to
            visualize what the breadth-first search algorithm does is to imagine
            that it is building a tree, one level of the tree at a time. A breadth
            first search adds all children of the starting vertex before it begins
            to discover any of the grandchildren.</p>
  <p>To keep track of its progress, BFS colors each of the vertices white,
            gray, or black. All the vertices are initialized to white when they are
            constructed. A white vertex is an undiscovered vertex. When a vertex is
            initially discovered it is colored gray, and when BFS has completely
            explored a vertex it is colored black. This means that once a vertex is
            colored black, it has no white vertices adjacent to it. A gray node, on
            the other hand, may have some white vertices adjacent to it, indicating
            that there are still additional vertices to explore.</p>
  <p>The breadth-first search algorithm shown in <xref ref="graphs_lst-wordbucket2"/> below uses the
            adjacency list graph representation we developed earlier. In addition it uses a <c>Queue</c>,
            a crucial point as we will see, to decide which vertex to explore next.</p>
  <listing xml:id="graphs_lst-wordbucket2"><pre>from pythonds3.basic import Queue
from pythonds3.graphs import Graph


def bfs(start):
    start.distance = 0
    start.previous = None
    vert_queue = Queue()
    vert_queue.enqueue(start)
    while vert_queue.size() &gt; 0:
        current = vert_queue.dequeue()
        for neighbor in current.get_neighbors():
            if neighbor.color == "white":
                neighbor.color = "gray"
                neighbor.distance = current.distance + 1
                neighbor.previous = current
                vert_queue.enqueue(neighbor)
        current.color = "black"</pre></listing>
  <p>The BFS algorithm uses an extended version of the <c>Vertex</c>
            class that adds three new instance variables:
            <c>distance</c>, <c>previous</c>, and <c>color</c>. Each of these instance variables also
            has the appropriate getter and setter methods. The code for this
            expanded <c>Vertex</c> class is included in the <c>pythonds3</c> package, but we
            will not show it to you here as there is nothing new to learn by seeing
            the additional instance variables.</p>
  <p>BFS begins at the starting vertex <c>start</c> and paints it gray to
            show that it is currently being explored. Two other values, the <c>distance</c>
            and the <c>previous</c>, are initialized to 0 and <c>None</c> respectively for
            the starting vertex. Finally, <c>start</c> is placed on a <c>Queue</c>. The
            next step is to begin to systematically explore vertices at the front of
            the queue. We explore each new node at the front of the queue by
            iterating over its adjacency list. As each node on the adjacency list is
            examined, its color is checked. If it is white, the vertex is unexplored,
            and four things happen:</p>
  <p>
    <ol marker="1">
      <li>
        <p>The new unexplored vertex <c>neighbor</c> is colored gray.</p>
      </li>
      <li>
        <p>The predecessor of <c>neighbor</c> is set to the current node <c>current</c>.</p>
      </li>
      <li>
        <p>The distance to <c>neighbor</c> is set to the distance to <c>current + 1</c>.</p>
      </li>
      <li>
        <p><c>neighbor</c> is added to the end of a queue. Adding <c>neighbor</c> to the end of
                    the queue effectively schedules this node for further exploration,
                    but not until all the other vertices on the adjacency list of
                    <c>current</c> have been explored.</p>
      </li>
    </ol>
  </p>
  <p>Let's look at how the <c>bfs</c> function would construct the breadth-first
            tree corresponding to the graph in <xref ref="graphs_buildingthe-word-ladder-graph"/>. Starting
            from FOOL we take all nodes that are adjacent to FOOL and add them to
            the tree. The adjacent nodes include POOL, FOIL, FOUL, and COOL. Each of
            these nodes are added to the queue of new nodes to expand.
            <xref ref="i182_id1fig-bfs1"/> shows the state of the in-progress tree along with the
            queue after this step.</p>
  <figure align="center" xml:id="i182_id1fig-bfs1">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: The First Step in the Breadth-First Search</caption>
    <image source="Graphs/Figures/bfs1.png" width="50%"/>
  </figure>
  <p>In the next step <c>bfs</c> removes the next node (POOL) from the front of
            the queue and repeats the process for all of its adjacent nodes.
            However, when <c>bfs</c> examines the node COOL, it finds that the color of
            COOL has already been changed to gray. This indicates that there is a
            shorter path to COOL and that COOL is already on the queue for further
            expansion. The only new node added to the queue while examining POOL is
            POLL. The new state of the tree and queue is shown in <xref ref="i182_id2fig-bfs2"/>.</p>
  <figure align="center" xml:id="i182_id2fig-bfs2">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: The Second Step in the Breadth-First Search</caption>
    <image source="Graphs/Figures/bfs2.png" width="50%"/>
  </figure>
  <p>The next vertex on the queue is FOIL. The only new node that FOIL can
            add to the tree is FAIL. As <c>bfs</c> continues to process the queue,
            neither of the next two nodes adds anything new to the queue or the tree.
            <xref ref="fig-bfs3"/> shows the tree and the queue after expanding all the
            vertices on the second level of the tree.</p>
  <figure align="center" xml:id="file_140_id3">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 5: Breadth-First Search Tree After Completing One Level</caption>
    <image source="Graphs/Figures/bfs3.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="file_140_id4">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">FIgure 6: Final Breadth-First Search Tree</caption>
    <image source="Graphs/Figures/bfsDone.png" width="50%"/>
  </figure>
  <p>You should continue to work through the algorithm on your own so that
            you are comfortable with how it works. <xref ref="fig-bfsdone"/> shows the
            final breadth-first search tree after all the vertices in
            <xref ref="graphs_buildingthe-word-ladder-graph"/> have been expanded. The amazing thing about the
            breadth-first search solution is that we have not only solved the
            FOOL&#x2013;SAGE problem we started out with, but we have solved many other
            problems along the way. We can start at any vertex in the breadth-first
            search tree and follow the predecessor arrows back to the root to find
            the shortest word ladder from any word back to FOOL.
            The function below (<xref ref="graphs_lst-wordbucket3"/>) shows
            how to follow the predecessor links to print out the word ladder.</p>
  <listing xml:id="graphs_lst-wordbucket3"><pre>def traverse(starting_vertex):
    current = starting_vertex
    while current:
        print(current.key)
        current = current.previous

traverse(g.get_vertex("sage"))</pre></listing>
</section>
