<?xml version="1.0"?>
<section xml:id="graphs_an-adjacency-matrix">
  <title>An Adjacency Matrix</title>
  <p>One of the easiest ways to implement a graph is to use a two-dimensional
            matrix. In this matrix implementation, each of the rows and columns
            represents a vertex in the graph. The value that is stored in the cell at
            the intersection of row <math>v</math> and column <math>w</math> indicates if
            there is an edge from vertex <math>v</math> to vertex <math>w</math>. When two
            vertices are connected by an edge, we say that they are <term>adjacent</term>.
            <xref ref="i197_id1fig-adjmat"/> illustrates the adjacency matrix for the graph in
            <xref ref="graphs_vocabularyand-definitions"/>. The value in each cell represents the weight of the
            edge from vertex <math>v</math> to vertex <math>w</math>.</p>
  <figure align="center" xml:id="i197_id1fig-adjmat">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: An Adjacency Matrix Representation for a Graph</caption>
    <image source="Graphs/Figures/adjMat.png" width="50%"/>
  </figure>
  <p>The advantage of the adjacency matrix is that it is simple, and for
            small graphs it is easy to see which nodes are connected to other nodes.
            However, otice that most of the cells in the matrix are empty;
            we can say that this matrix is <em>sparse</em>. A
            matrix is not a very efficient way to store sparse data. In fact, in
            Python you must go out of your way to even create a matrix structure
            like the one in <xref ref="i197_id1fig-adjmat"/>.</p>
  <p>The adjacency matrix is a good implementation for a graph when the
            number of edges is large. But what do we mean by large? How many edges
            would be needed to fill the matrix? Since there is one row and one
            column for every vertex in the graph, the number of edges required to
            fill the matrix is <math>|V|^2</math>. A matrix is full when every vertex
            is connected to every other vertex. There are few real problems that
            approach this sort of connectivity. The problems we will look at in this
            chapter all involve graphs that are sparsely connected.</p>
</section>
