<?xml version="1.0"?>
<section xml:id="graphs_implementing-knights-tour">
  <title>Implementing Knight's Tour</title>
  <p>The search algorithm we will use to solve the knight's tour problem is
            called <term>depth-first search</term> (<term>DFS</term>).  Whereas the
            breadth-first search algorithm builds
            a search tree one level at a time, a depth-first search creates a search
            tree by exploring one branch of the tree as deeply as possible. In this
            section we will look at two algorithms that implement a depth-first
            search. The first algorithm we will look at specifically solves the knight's
            tour problem by explicitly forbidding a node to be visited more than
            once. The second implementation is more general, but allows nodes to be
            visited more than once as the tree is constructed. The second version is
            used in subsequent sections to develop additional graph algorithms.</p>
  <p>The depth-first exploration of the graph is exactly what we need in
            order to find a path through 64 vertices (one for each square on the chessboard)
            and 63 edges. We will see that when
            the depth-first search algorithm finds a dead end (a place in the graph
            where there are no more moves possible) it backs up the tree to the next
            deepest vertex that allows it to make a legal move.</p>
  <p>The <c>knight_tour</c> function shown in <xref ref="lst-knight"/>
            takes four parameters: <c>n</c>, the current
            depth in the search tree; <c>path</c>, a list of vertices visited up to
            this point; <c>u</c>, the vertex in the graph we wish to explore; and
            <c>limit</c>, the number of nodes in the path. The <c>knight_tour</c> function
            is recursive. When the <c>knight_tour</c> function is called, it first
            checks the base case condition. If we have a path that contains 64
            vertices, we return from <c>knight_tour</c> with a status of <c>True</c>,
            indicating that we have found a successful tour. If the path is not long
            enough, we continue to explore one level deeper by choosing a new vertex
            to explore and calling <c>knight_tour</c> recursively for that vertex.</p>
  <p xml:id="graphs_lst-knight" names="lst_knight">
    <term>Listing 3</term>
  </p>
  <pre>from pythonds3.graphs import Graph


def knight_tour(n, path, u, limit):
    u.color = "gray"
    path.append(u)
    if n &lt; limit:
        neighbors = sorted(list(u.get_neighbors()))
        i = 0
        done = False
        while i &lt; len(neighbors) and not done:
            if neighbors[i].color == "white":
                done = knight_tour(n + 1, path, neighbors[i], limit)
            i = i + 1
        if not done:  # prepare to backtrack
            path.pop()
            u.color = "white"
    else:
        done = True
    return done</pre>
  <p>DFS also uses colors to keep track of which vertices in the graph have
            been visited. Unvisited vertices are colored white, and visited vertices
            are colored gray. If all neighbors of a particular vertex have been
            explored and we have not yet reached our goal length of 64 vertices, we
            have reached a dead end and must backtrack.
            Backtracking happens when we return from <c>knight_tour</c> with a status of
            <c>False</c>. In the breadth-first search we used a queue to keep track of
            which vertex to visit next. Since depth-first search is recursive, we
            are implicitly using a stack to help us with our backtracking. When we
            return from a call to <c>knight_tour</c> with a status of <c>False</c>, in line 11,
            we remain inside the <c>while</c> loop and look at the next
            vertex in <c>neighbors</c>.</p>
  <p>Let's look at a simple example of <c>knight_tour</c> (<xref ref="lst-knight"/>) in action. You
            can refer to the figures below to follow the steps of the search. For
            this example we will assume that the call to the <c>get_neighbors</c>
            method on line 6 orders the nodes in
            alphabetical order. We begin by calling <c>knight_tour(0, path, A, 6)</c>.</p>
  <figure align="center" xml:id="191_id1fig-kta">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: Start with Node A</caption>
    <image source="Graphs/Figures/ktdfsa.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="191_id2fig-ktb">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Explore B</caption>
    <image source="Graphs/Figures/ktdfsb.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id3">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 5: Node C is a Dead End</caption>
    <image source="Graphs/Figures/ktdfsc.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id4">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 6: Backtrack to B</caption>
    <image source="Graphs/Figures/ktdfsd.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id5">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 7: Explore D</caption>
    <image source="Graphs/Figures/ktdfse.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id6">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 8: Explore E</caption>
    <image source="Graphs/Figures/ktdfsf.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id7">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 9: Explore F</caption>
    <image source="Graphs/Figures/ktdfsg.png" width="50%"/>
  </figure>
  <figure align="center" xml:id="id8">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 10: Finish</caption>
    <image source="Graphs/Figures/ktdfsh.png" width="50%"/>
  </figure>
  <p><c>knight_tour</c> starts with node A in <xref ref="fig-kta"/>. The nodes adjacent to A are B and D.
            Since B is before D alphabetically, DFS selects B to expand next as
            shown in <xref ref="fig-ktb"/>. Exploring B happens when <c>knight_tour</c> is
            called recursively. B is adjacent to C and D, so <c>knight_tour</c> elects
            to explore C next. However, as you can see in <xref ref="fig-ktc"/> node C is
            a dead end with no adjacent white nodes. At this point we change the
            color of node C back to white. The call to <c>knight_tour</c> returns a
            value of <c>False</c>. The return from the recursive call effectively
            backtracks the search to vertex B (see <xref ref="fig-ktd"/>). The next
            vertex on the list to explore is vertex D, so <c>knight_tour</c> makes a
            recursive call moving to node D (see <xref ref="fig-kte"/>). From vertex D on,
            <c>knight_tour</c> can continue to make recursive calls until we
            get to node C again (see <xref ref="fig-ktf"/>, <xref ref="fig-ktg"/>, and  <xref ref="fig-kth"/>).  However, this time when we get to node C the
            test <c>n &lt; limit</c> fails so we know that we have exhausted all the
            nodes in the graph. At this point we can return <c>True</c> to indicate
            that we have made a successful tour of the graph. When we return the
            list, <c>path</c> has the values <c>[A, B, D, E, F, C]</c>, which is the order
            we need to traverse the graph to visit each node exactly once.</p>
  <p><xref ref="fig-tour"/> shows you what a complete tour around an
            <math>8 \times 8</math> board looks like. There are many possible tours; some are
            symmetric. With some modification you can make circular tours that start
            and end at the same square.</p>
  <figure align="center" xml:id="id9">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 11: A Complete Tour of the Board Found by <literal>knight_tour</literal></caption>
    <image source="Graphs/Figures/completeTour.png" width="50%"/>
  </figure>
</section>
