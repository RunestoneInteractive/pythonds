<?xml version="1.0"?>
<section xml:id="basic-ds_infix-prefix-and-postfix-expressions">
  <title>Infix, Prefix, and Postfix Expressions</title>
  <p>When you write an arithmetic expression such as B &#xB7; C, the form of the
            expression provides you with information so that you can interpret it
            correctly. In this case we know that the variable B is being multiplied
            by the variable C since the multiplication operator &#xB7; appears between
            them in the expression. This type of notation is referred to as
            <term>infix</term> since the operator is <em>in between</em> the two operands that it is
            working on.</p>
  <p>Consider another infix example, A + B &#xB7; C. The operators + and &#xB7; still
            appear between the operands, but there is a problem. Which operands do
            they work on? Does the + work on A and B, or does the &#xB7; take B and C?
            The expression seems ambiguous.</p>
  <p>In fact, you have been reading and writing these types of expressions
            for a long time and they do not cause you any problem. The reason for
            this is that you know something about the operators + and &#xB7;. Each
            operator has a <term>precedence</term> level. Operators of higher precedence are
            used before operators of lower precedence. The only thing that can
            change that order is the presence of parentheses. The precedence order
            for arithmetic operators places multiplication and division above
            addition and subtraction. If two operators of equal precedence appear,
            then a left-to-right ordering or associativity is used.</p>
  <p>Let's interpret the troublesome expression A + B &#xB7; C using operator
            precedence. B and C are multiplied first, and A is then added to that
            result. (A + B) &#xB7; C would force the addition of A and B to be done
            first before the multiplication. In the expression A + B + C, by precedence
            (via associativity), the leftmost + would be done first.</p>
  <p>Although all this may be obvious to you, remember that computers need to
            know exactly what operations to perform and in what order. One way to
            write an expression that guarantees there will be no confusion with
            respect to the order of operations is to create what is called a <term>fully
                parenthesized</term> expression. This type of expression uses one pair of
            parentheses for each operator. The parentheses dictate the order of
            operations; there is no ambiguity. There is also no need to remember any
            precedence rules.</p>
  <p>The expression A + B &#xB7; C + D can be rewritten as ((A + (B &#xB7; C)) + D)
            to show that the multiplication happens first, followed by the leftmost
            addition. A + B + C + D can be written as (((A + B) + C) + D) since the
            addition operations associate from left to right.</p>
  <p>There are two other very important expression formats that may not seem
            obvious to you at first. Consider the infix expression A + B. What would
            happen if we moved the operator before the two operands? The resulting
            expression would be + A B. Likewise, we could move the operator to the
            end, resulting in A B +. These look a bit strange.</p>
  <p>These changes to the position of the operator with respect to the
            operands create two new expression formats, <term>prefix</term> and <term>postfix</term>.
            Prefix expression notation requires that all operators precede the two
            operands that they work on. Postfix, on the other hand, requires that
            its operators come after the corresponding operands. A few more examples
            should help to make this a bit clearer (see <xref ref="basic-ds_tbl-example1"/>).</p>
  <p>A + B &#xB7; C would be written as + A &#xB7; B C in prefix. The multiplication
            operator comes immediately before the operands B and C, denoting that &#xB7;
            has precedence over +. The addition operator then appears before the A
            and the result of the multiplication.</p>
  <p>In postfix, the expression would be A B C &#xB7; +. Again, the order of
            operations is preserved since the &#xB7; appears immediately after the B and
            the C, denoting that &#xB7; has precedence, with + coming after. Although
            the operators moved and now appear either before or after their
            respective operands, the order of the operands stayed exactly the same
            relative to one another.</p>
  <table xml:id="basic-ds_id1">
    <tabular>
      <title>
        <term>Table 2: Examples of Infix, Prefix, and Postfix Expressions</term>
      </title>
      <row header="yes">
        <cell>
          <term>Infix Expression</term>
        </cell>
        <cell>
          <term>Prefix Expression</term>
        </cell>
        <cell>
          <term>Postfix Expression</term>
        </cell>
      </row>
      <row>
        <cell>
                            A + B
                        </cell>
        <cell>
                            + A B
                        </cell>
        <cell>
                            A B +
                        </cell>
      </row>
      <row>
        <cell>
                            A + B &#xB7; C
                        </cell>
        <cell>
                            + A &#xB7; B C
                        </cell>
        <cell>
                            A B C &#xB7; +
                        </cell>
      </row>
    </tabular>
  </table>
  <p>Now consider the infix expression (A + B) &#xB7; C. Recall that in this
            case, infix requires the parentheses to force the performance of the
            addition before the multiplication. However, when A + B was written in
            prefix, the addition operator was simply moved before the operands, + A
            B. The result of this operation becomes the first operand for the
            multiplication. The multiplication operator is moved in front of the
            entire expression, giving us &#xB7; + A B C. Likewise, in postfix A B +
            forces the addition to happen first. The multiplication can be done to
            that result and the remaining operand C. The proper postfix expression
            is then A B + C &#xB7;.</p>
  <p>Consider these three expressions again (see <xref ref="basic-ds_tbl-parexample"/>).
            Something very important has happened. Where did the parentheses go? Why
            don't we need them in prefix and postfix? The answer is that the
            operators are no longer ambiguous with respect to the operands that they
            work on. Only infix notation requires the additional symbols. The order
            of operations within prefix and postfix expressions is completely
            determined by the position of the operator and nothing else. In many
            ways, this makes infix the least desirable notation to use.</p>
  <table xml:id="basic-ds_id2">
    <tabular>
      <title>
        <term>Table 3: Comparison of Infix, Prefix, and Postfix Expressions</term>
      </title>
      <row header="yes">
        <cell>
          <term>Infix Expression</term>
        </cell>
        <cell>
          <term>Prefix Expression</term>
        </cell>
        <cell>
          <term>Postfix Expression</term>
        </cell>
      </row>
      <row>
        <cell>
                            (A + B) &#xB7; C
                        </cell>
        <cell>
                            &#xB7; + A B C
                        </cell>
        <cell>
                            A B + C &#xB7;
                        </cell>
      </row>
    </tabular>
  </table>
  <p><xref ref="basic-ds_tbl-example3"/> shows some additional examples of infix expressions and
            the equivalent prefix and postfix expressions. Be sure that you
            understand how they are equivalent in terms of the order of the
            operations being performed.</p>
  <table xml:id="basic-ds_id3">
    <tabular>
      <title>
        <term>Table 4: Additional Examples of Infix, Prefix, and Postfix Expressions</term>
      </title>
      <row header="yes">
        <cell>
          <term>Infix Expression</term>
        </cell>
        <cell>
          <term>Prefix Expression</term>
        </cell>
        <cell>
          <term>Postfix Expression</term>
        </cell>
      </row>
      <row>
        <cell>
                            A + B &#xB7; C + D
                        </cell>
        <cell>
                            + + A &#xB7; B C D
                        </cell>
        <cell>
                            A B C &#xB7; + D +
                        </cell>
      </row>
      <row>
        <cell>
                            (A + B) &#xB7; (C + D)
                        </cell>
        <cell>
                            &#xB7; + A B + C D
                        </cell>
        <cell>
                            A B + C D + &#xB7;
                        </cell>
      </row>
      <row>
        <cell>
                            A &#xB7; B + C &#xB7; D
                        </cell>
        <cell>
                            + &#xB7; A B &#xB7; C D
                        </cell>
        <cell>
                            A B &#xB7; C D &#xB7; +
                        </cell>
      </row>
      <row>
        <cell>
                            A + B + C + D
                        </cell>
        <cell>
                            + + + A B C D
                        </cell>
        <cell>
                            A B + C + D +
                        </cell>
      </row>
    </tabular>
  </table>
  <subsection xml:id="basic-ds_conversion-of-infix-expressions-to-prefix-and-postfix">
    <title>Conversion of Infix Expressions to Prefix and Postfix</title>
    <p>So far, we have used ad hoc methods to convert between infix expressions
                and the equivalent prefix and postfix expression notations. As you might
                expect, there are algorithmic ways to perform the conversion that allow
                any expression of any complexity to be correctly transformed.</p>
    <p>The first technique that we will consider uses the notion of a fully
                parenthesized expression that was discussed earlier. Recall that A + B
                &#xB7; C can be written as (A + (B &#xB7; C)) to show explicitly that the
                multiplication has precedence over the addition. On closer observation,
                however, you can see that each parenthesis pair also denotes the
                beginning and the end of an operand pair with the corresponding operator
                in the middle.</p>
    <p>Look at the right parenthesis in the subexpression (B &#xB7; C) above. If we
                were to move the multiplication symbol to that position and remove the
                matching left parenthesis, giving us B C &#xB7;, we would in effect have
                converted the subexpression to postfix notation. If the addition
                operator were also moved to its corresponding right parenthesis position
                and the matching left parenthesis were removed, the complete postfix
                expression would result (see <xref ref="fig-moveright"/>).</p>
    <figure align="center" xml:id="file_116_id4">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 6: Moving Operators to the Right for Postfix Notation</caption>
      <image source="BasicDS/Figures/moveright.png" width="50%"/>
    </figure>
    <p>If we do the same thing but instead of moving the symbol to the position
                of the right parenthesis, we move it to the left, we get prefix notation
                (see <xref ref="fig-moveleft"/>). The position of the parenthesis pair is
                actually a clue to the final position of the enclosed operator.</p>
    <figure align="center" xml:id="file_116_id5">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 7: Moving Operators to the Left for Prefix Notation</caption>
      <image source="BasicDS/Figures/moveleft.png" width="50%"/>
    </figure>
    <p>So in order to convert an expression, no matter how complex, to either
                prefix or postfix notation, fully parenthesize the expression using the
                order of operations. Then move the enclosed operator to the position of
                either the left or the right parenthesis depending on whether you want
                prefix or postfix notation.</p>
    <p>Here is a more complex expression: (A + B) &#xB7; C - (D - E) &#xB7; (F + G).
                <xref ref="fig-complexmove"/> shows the conversion to prefix and postfix
                notations.</p>
    <figure align="center" xml:id="file_116_id6">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 8: Converting a Complex Expression to Prefix and Postfix Notations</caption>
      <image source="BasicDS/Figures/complexmove.png" width="50%"/>
    </figure>
  </subsection>
  <subsection xml:id="basic-ds_general-infix-to-postfix-conversion">
    <title>General Infix-to-Postfix Conversion</title>
    <p>We need to develop an algorithm to convert any infix expression to a
                postfix expression. To do this we will look closer at the conversion
                process.</p>
    <p>Consider once again the expression A + B &#xB7; C. As shown above,
                A B C &#xB7; + is the postfix equivalent. We have already noted that the
                operands A, B, and C stay in their relative positions. It is only the
                operators that change position. Let's look again at the operators in the
                infix expression. The first operator that appears from left to right is
                +. However, in the postfix expression, + is at the end since the next
                operator, &#xB7;, has precedence over addition. The order of the operators
                in the original expression is reversed in the resulting postfix
                expression.</p>
    <p>As we process the expression, the operators have to be saved somewhere
                since their corresponding right operands are not seen yet. Also, the
                order of these saved operators may need to be reversed due to their
                precedence. This is the case with the addition and the multiplication in
                this example. Since the addition operator comes before the
                multiplication operator and has lower precedence, it needs to appear
                after the multiplication operator is used. Because of this reversal of
                order, it makes sense to consider using a stack to keep the operators
                until they are needed.</p>
    <p>What about (A + B) &#xB7; C? Recall that A B + C &#xB7; is the postfix
                equivalent. Again, processing this infix expression from left to right,
                we see + first. In this case, when we see &#xB7;, + has already been placed
                in the result expression because it has precedence over &#xB7; by virtue of
                the parentheses. We can now start to see how the conversion algorithm
                will work. When we see a left parenthesis, we will save it to denote
                that another operator of high precedence will be coming. That operator
                will need to wait until the corresponding right parenthesis appears to
                denote its position (recall the fully parenthesized technique). When
                that right parenthesis does appear, the operator can be popped from the
                stack.</p>
    <p>As we scan the infix expression from left to right, we will use a stack
                to keep the operators. This will provide the reversal that we noted in
                the first example. The top of the stack will always be the most recently
                saved operator. Whenever we read a new operator, we will need to
                consider how that operator compares in precedence with the operators, if
                any, already on the stack.</p>
    <p>Assume the infix expression is a string of tokens delimited by spaces.
                The operator tokens are &#xB7;, /, +, and -, along with the left and right
                parentheses, ( and ). The operand tokens are the single-character
                identifiers A, B, C, and so on. The following steps will produce a
                string of tokens in postfix order.</p>
    <p>
      <ol marker="1">
        <li>
          <p>Create an empty stack called <c>op_stack</c> for keeping operators.
                        Create an empty list for output.</p>
        </li>
        <li>
          <p>Convert the input infix string to a list by using the string method
                        <c>split</c>.</p>
        </li>
        <li>
          <p>Scan the token list from left to right.</p>
          <p>
            <ul>
              <li>
                <p>If the token is an operand, append it to the end of the output
                                list.</p>
              </li>
              <li>
                <p>If the token is a left parenthesis, push it on the <c>op_stack</c>.</p>
              </li>
              <li>
                <p>If the token is a right parenthesis, pop the <c>op_stack</c> until the
                                corresponding left parenthesis is removed. Append each operator to
                                the end of the output list.</p>
              </li>
              <li>
                <p>If the token is an operator, &#xB7;, /, +, or -, push it on the
                                <c>op_stack</c>. However, first remove any operators already on the
                                <c>op_stack</c> that have higher or equal precedence and append them
                                to the output list.</p>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>When the input expression has been completely processed, check the
                        <c>op_stack</c>. Any operators still on the stack can be removed and
                        appended to the end of the output list.</p>
        </li>
      </ol>
    </p>
    <p><xref ref="fig-intopost"/> shows the conversion algorithm working on the
                expression A &#xB7; B + C &#xB7; D. Note that the first &#xB7; operator is removed
                upon seeing the + operator. Also, + stays on the stack when the second
                &#xB7; occurs, since multiplication has precedence over addition. At the end
                of the infix expression the stack is popped twice, removing both
                operators and placing + as the last operator in the postfix expression.</p>
    <figure align="center" xml:id="file_116_id7">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 9: Converting A &#xB7; B + C &#xB7; D to Postfix Notation</caption>
      <image source="BasicDS/Figures/intopost.png" width="50%"/>
    </figure>
    <p>In order to code the algorithm in Python, we will use a dictionary
                called <c>prec</c> to hold the precedence values for the operators,
                as seen in in <xref ref="lst-intopost"/>. This
                dictionary will map each operator to an integer that can be compared
                against the precedence levels of other operators (we have arbitrarily
                used the integers 3, 2, and 1). The left parenthesis will receive the
                lowest value possible. This way any operator that is compared against it
                will have higher precedence and will be placed on top of it.
                Line 15 defines the operands to be any upper-case character or digit.</p>
    <program xml:id="intopost" interactive="activecode" language="python">
      <input>
from pythonds3.basic import Stack

def infix_to_postfix(infix_expr):
    prec = {}
    prec["*"] = 3
    prec["/"] = 3
    prec["+"] = 2
    prec["-"] = 2
    prec["("] = 1
    op_stack = Stack()
    postfix_list = []
    token_list = infix_expr.split()

    for token in token_list:
        if token in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" or token in "0123456789":
            postfix_list.append(token)
        elif token == "(":
            op_stack.push(token)
        elif token == ")":
            top_token = op_stack.pop()
            while top_token != "(":
                postfix_list.append(top_token)
                top_token = op_stack.pop()
        else:
            while (not op_stack.is_empty()) and (prec[op_stack.peek()] &gt;= prec[token]):
                postfix_list.append(op_stack.pop())
            op_stack.push(token)

    while not op_stack.is_empty():
        postfix_list.append(op_stack.pop())

    return " ".join(postfix_list)

print(infix_to_postfix("A * B + C * D"))
print(infix_to_postfix("( A + B ) * C - ( D - E ) * ( F + G )"))
        </input>
    </program>
    <transition/>
    <p>A few more examples of execution in the Python shell are shown below.</p>
    <pre>&gt;&gt;&gt; infix_to_postfix("( A + B ) * ( C + D )")
'A B + C D + *'
&gt;&gt;&gt; infix_to_postfix("( A + B ) * C")
'A B + C *'
&gt;&gt;&gt; infix_to_postfix("A + B * C")
'A B C * +'
&gt;&gt;&gt;</pre>
  </subsection>
  <subsection xml:id="basic-ds_postfix-evaluation">
    <title>Postfix Evaluation</title>
    <p>As a final stack example, we will consider the evaluation of an
                expression that is already in postfix notation. In this case, a stack is
                again the data structure of choice. However, as you scan the postfix
                expression, it is the operands that must wait, not the operators as in
                the conversion algorithm above. Another way to think about the solution
                is that whenever an operator is seen on the input, the two most recent
                operands will be used in the evaluation.</p>
    <p>To see this in more detail, consider the postfix expression
                4 5 6 &#xB7; +. As you scan the expression from left to right, you first
                encounter the operands 4 and 5. At this point, you are still unsure what
                to do with them until you see the next symbol. Placing each on the stack
                ensures that they are available if an operator comes next.</p>
    <p>In this case, the next symbol is another operand. So, as before, push it
                and check the next symbol. Now we see an operator, &#xB7;. This means that
                the two most recent operands need to be used in a multiplication
                operation. By popping the stack twice, we can get the proper operands
                and then perform the multiplication (in this case getting the result
                30).</p>
    <p>We can now handle this result by placing it back on the stack so that it
                can be used as an operand for the later operators in the expression.
                When the final operator is processed, there will be only one value left
                on the stack. Pop and return it as the result of the expression.
                <xref ref="fig-evalpost1"/> shows the stack contents as this entire example
                expression is being processed.</p>
    <figure align="center" xml:id="file_116_id8">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 10: Stack Contents During Evaluation</caption>
      <image source="BasicDS/Figures/evalpostfix1.png" width="50%"/>
    </figure>
    <p><xref ref="fig-evalpost2"/> shows a slightly more complex example, 7 8 + 3 2
                + /. There are two things to note in this example. First, the stack size
                grows, shrinks, and then grows again as the subexpressions are
                evaluated. Second, the division operation needs to be handled carefully.
                Recall that the operands in the postfix expression are in their original
                order since postfix changes only the placement of operators. When the
                operands for the division are popped from the stack, they are reversed.
                Since division is <em>not</em> a commutative operator, in other words
                <math>15/5</math> is not the same as <math>5/15</math>, we must be sure that
                the order of the operands is not switched.</p>
    <figure align="center" xml:id="file_116_id9">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 11: A More Complex Example of Evaluation</caption>
      <image source="BasicDS/Figures/evalpostfix2.png" width="50%"/>
    </figure>
    <p>Assume the postfix expression is a string of tokens delimited by spaces.
                The operators are &#xB7;, /, +, and - and the operands are assumed to be
                single-digit integer values. The output will be an integer result.</p>
    <p>
      <ol marker="1">
        <li>
          <p>Create an empty stack called <c>operand_stack</c>.</p>
        </li>
        <li>
          <p>Convert the string to a list by using the string method <c>split</c>.</p>
        </li>
        <li>
          <p>Scan the token list from left to right.</p>
          <p>
            <ul>
              <li>
                <p>If the token is an operand, convert it from a string to an integer
                                and push the value onto the <c>operand_stack</c>.</p>
              </li>
              <li>
                <p>If the token is an operator, &#xB7;, /, +, or -, it will need two
                                operands. Pop the <c>operand_stack</c> twice. The first pop is the
                                second operand and the second pop is the first operand. Perform
                                the arithmetic operation. Push the result back on the
                                <c>operand_stack</c>.</p>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>When the input expression has been completely processed, the result
                        is on the stack. Pop the <c>operand_stack</c> and return the value.</p>
        </li>
      </ol>
    </p>
    <p>The complete function for the evaluation of postfix expressions is shown
                in <xref ref="lst-postfixeval"/>. To assist with the arithmetic, a helper
                function <c>do_math</c> is defined. It will take two operands and an
                operator and then perform the proper arithmetic operation.</p>
    <program xml:id="postfixeval" interactive="activecode" language="python">
      <input>
from pythonds3.basic import Stack

def postfix_eval(postfix_expr):
    operand_stack = Stack()
    token_list = postfix_expr.split()

    for token in token_list:
        if token in "0123456789":
            operand_stack.push(int(token))
        else:
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = do_math(token, operand1, operand2)
            operand_stack.push(result)
    return operand_stack.pop()


def do_math(op, op1, op2):
    if op == "*":
        return op1 * op2
    elif op == "/":
        return op1 / op2
    elif op == "+":
        return op1 + op2
    else:
        return op1 - op2


print(postfix_eval("7 8 + 3 2 + /"))
        </input>
    </program>
    <p>It is important to note that in both the postfix conversion and the
                postfix evaluation programs we assumed that there were no errors in the
                input expression. Using these programs as a starting point, you can
                easily see how error detection and reporting can be included. We leave
                this as an exercise at the end of the chapter.</p>
    <note>
      <title>Self Check</title>
      <exercise label="postfix1">
        <statement>
          <p>Q-3: Without using the activecode <c>infix_to_postfix</c> function, convert the following expression to postfix  <c>10 + 3 * 5 / (16 - 4)</c> . <var/>  </p>
        </statement>
        <setup>
          <var>
            <p>
              <BlankNode/>
            </p>
            <condition string="^\s*10\s+3\s+5\s*\*\s*16\s+4\s*-\s*/\s*\+\s*$">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string="^\s*10.*3.*5.*16.*4\s+[\s+/+*-]*\s*$">
              <feedback>
                <p>The numbers appear to be in the correct order check your operators</p>
              </feedback>
            </condition>
          </var>
        </setup>
      </exercise>
      <exercise label="postfix2">
        <statement>
          <p>Q-4: What is the result of evaluating the following: <c>17 10 + 3 * 9 / ==</c> ? <var/>  </p>
        </statement>
        <setup>
          <var>
            <p>
              <BlankNode/>
            </p>
            <condition number="[9, 9]">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
          </var>
        </setup>
      </exercise>
      <exercise label="postfix3">
        <statement>
          <p>Q-5: Modify the <c>infix_to_postfix</c> function so that it can convert the following expression:  <c>5 * 3 ^ (4 - 2)</c>. Run the function on the expression and paste the answer here: <var/>  </p>
        </statement>
        <setup>
          <var>
            <p>
              <BlankNode/>
            </p>
            <condition string="^\s*5\s+3\s+4\s+2\s*-\s*\*\*\s*\*\s*$">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
          </var>
        </setup>
      </exercise>
    </note>
    <video xml:id="video_Stack3" youtube="LO-2q4pSsdM" width="auto"/>
  </subsection>
</section>
