<?xml version="1.0"?>
<section xml:id="sort-search_the-insertion-sort">
  <title>The Insertion Sort</title>
  <p>The <term>insertion sort</term>, although still <m>O(n^{2})</m>, works in a
            slightly different way. It always maintains a sorted sublist in the
            lower positions of the list. Each new item is then inserted back into
            the previous sublist such that the sorted sublist is one item larger.
            <xref ref="i16_id1fig-insertionsort"/> shows the insertion sorting process. The shaded
            items represent the ordered sublists as the algorithm makes each pass.</p>
  <figure align="center" xml:id="i16_id1fig-insertionsort">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Insertion Sort: Complete</caption>
    <image source="SortSearch/Figures/insertionsort.png" width="50%"/>
  </figure>
  <p>We begin by assuming that a list with one item (position <m>0</m>) is
            already sorted. On each pass, one for each item 1 through <m>n-1</m>,
            the current item is checked against those in the already sorted sublist.
            As we look back into the already sorted sublist, we shift those items
            that are greater to the right. When we reach a smaller item or the end
            of the sublist, the current item can be inserted.</p>
  <p><xref ref="i16_id2fig-insertionpass"/> shows the fifth pass in detail. At this point in
            the algorithm, here is a sorted sublist of five items: 17, 26, 54,
            77, and 93. We want to insert 31 back into the already sorted
            items. The first comparison against 93 causes 93 to be shifted to the
            right. 77 and 54 are also shifted. When the item 26 is encountered, the
            shifting process stops and 31 is placed in the open position. Now we
            have a sorted sublist of six items.</p>
  <figure align="center" xml:id="i16_id2fig-insertionpass">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 5: Insertion Sort: Fifth Pass of the Sort</caption>
    <image source="SortSearch/Figures/insertionpass.png" width="50%"/>
  </figure>
  <p>The implementation of <c>insertion_sort</c> (<xref ref="lst-insertion"/>) shows that
            there are again <m>n-1</m> passes to sort <m>n</m> items. The iteration
            starts at position 1 and moves through position <m>n-1</m>, as these
            are the items that need to be inserted back into the sorted sublists.
            Line 8 performs the shift operation that moves a value up one position
            in the list, making room behind it for the insertion. Remember that this
            is not a complete exchange as was performed in the previous algorithms.</p>
  <p>The maximum number of comparisons for an insertion sort is the sum of
            the first <m>n-1</m> integers. Again, this is <m>O(n^{2})</m>.
            However, in the best case, only one comparison needs to be done on each
            pass. This would be the case for an already sorted list.</p>
  <p>One note about shifting versus exchanging is also important. In general,
            a shift operation requires approximately a third of the processing work
            of an exchange since only one assignment is performed. In benchmark
            studies, insertion sort will show very good performance.</p>
<listing xml:id="lst-insertion">
  <program interactive="activecode" language="python">
    <input>
def insertion_sort(a_list):
    for i in range(1, len(a_list)):
        cur_val = a_list[i]
        cur_pos = i

        while cur_pos &gt; 0 and a_list[cur_pos - 1] &gt; cur_val:
            a_list[cur_pos] = a_list[cur_pos - 1]
            cur_pos = cur_pos - 1
        a_list[cur_pos] = cur_val


a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]
insertion_sort(a_list)
print(a_list)
        </input>
  </program>
</listing>
  <raw format="html" xml:space="preserve">&lt;script src="../_static/sortmodels.js"&gt;&lt;/script&gt;
&lt;script src="../_static/sortviewers.js"&gt;&lt;/script&gt;

&lt;div id="insertion_anim" class=""&gt;
&lt;canvas id="insertion_anim_canvas" width="400" height="400" style="border:4px solid blue"&gt;&lt;/canvas&gt;
&lt;br /&gt;
&lt;button onclick="insertion_anim_anim = insertion_anim_init('insertion_anim')"&gt;Initialize&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.run('insertion_anim_anim')"&gt;Run&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.stop()"&gt;Stop&lt;/button&gt; &lt;/br&gt;
&lt;button onclick="insertion_anim_anim.begin()"&gt;Beginning&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.forward()"&gt;Step Forward&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.backward()"&gt;Step Backward&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.end()"&gt;End&lt;/button&gt;

&lt;script&gt;
insertion_anim_init = function(divid)
{
   var a = new Animator(new InsertionSortModel(), new BarViewer(), divid)
   a.init()
   return a
}
&lt;/script&gt;

&lt;/div&gt;
</raw>
  <!--For more detail, CodeLens 4 allows you to step through the algorithm.-->
  <!---->
  <!--.. codelens:: insertionsortcodetrace-->
  <!--:caption: Tracing the Insertion Sort-->
  <!---->
  <!--def insertion_sort(a_list):-->
  <!--for i in range(1, len(a_list)):-->
  <!--cur_val = a_list[i]-->
  <!--cur_pos = i-->
  <!---->
  <!--while cur_pos > 0 and a_list[cur_pos - 1] > cur_val:-->
  <!--a_list[cur_pos] = a_list[cur_pos - 1]-->
  <!--cur_pos = cur_pos - 1-->
  <!--a_list[cur_pos] = cur_val-->
  <!---->
  <!---->
  <!--a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]-->
  <!--insertion_sort(a_list)-->
  <!--print(a_list)-->
  <note>
    <title>Self Check</title>
    <exercise label="question_sort_3">
      <statement>
        <dl>
          <li>
            <title>Q-3:  Suppose you have the following list of numbers to sort: &lt;br&gt;</title>
            <p>[15, 5, 4, 18, 12, 19, 14, 10, 8, 20] which list represents the partially sorted list after three complete passes of insertion sort?</p>
          </li>
        </dl>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>[4, 5, 12, 15, 14, 10, 8, 18, 19, 20]</p>
          </statement>
          <feedback>
            <p>This is a bubble sort.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[15, 5, 4, 10, 12, 8, 14, 18, 19, 20]</p>
          </statement>
          <feedback>
            <p>This is the result of selection sort.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>[4, 5, 15, 18, 12, 19, 14, 10, 8, 20]</p>
          </statement>
          <feedback>
            <p>Insertion sort works at the start of the list.  Each pass produces a longer sorted list.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[15, 5, 4, 18, 12, 19, 14, 8, 10, 20]</p>
          </statement>
          <feedback>
            <p>Insertion sort works on the front of the list not the end.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </note>
</section>
