<?xml version="1.0"?>
<section xml:id="sort-search_the-selection-sort">
  <title>The Selection Sort</title>
  <p>The <term>selection sort</term> improves on the bubble sort by making only one
            exchange for every pass through the list. In order to do this, a
            selection sort looks for the largest value as it makes a pass and, after
            completing the pass, places it in the proper location. As with a bubble
            sort, after the first pass, the largest item is in the correct place.
            After the second pass, the next largest is in place. This process
            continues and requires <math>n - 1</math> passes to sort <math>n</math> items, since the
            final item must be in place after the <math>(n - 1)</math>-th pass.</p>
  <p><xref ref="fig-selectionsort"/> shows the entire sorting process for the selection sort. On each pass,
            the largest remaining item is selected and then placed in its proper
            location. The first pass places 93, the second pass places 77, the third
            places 55, and so on. The function is shown in
            <xref ref="lst-selectionsortcode"/>.</p>
  <figure align="center" xml:id="18_id1fig-selectionsort">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: Selection Sort: Complete</caption>
    <image source="SortSearch/Figures/selectionsortnew.png" width="50%"/>
  </figure>
  <program xml:id="lst_selectionsortcode" interactive="activecode" language="python">
    <input>
def selection_sort(a_list):
    for i, item in enumerate(a_list):
        min_idx = len(a_list) - 1
        for j in range(i, len(a_list)):
            if a_list[j] &lt; a_list[min_idx]:
                min_idx = j
        if min_idx != i:
            a_list[min_idx], a_list[i] = a_list[i], a_list[min_idx]


a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]
selection_sort(a_list)
print(a_list)
        </input>
  </program>
  <raw format="html" xml:space="preserve">&lt;script src="../_static/sortmodels.js"&gt;&lt;/script&gt;
&lt;script src="../_static/sortviewers.js"&gt;&lt;/script&gt;

&lt;div id="selection_anim" class=""&gt;
&lt;canvas id="selection_anim_canvas" width="400" height="400" style="border:4px solid blue"&gt;&lt;/canvas&gt;
&lt;br /&gt;
&lt;button onclick="selection_anim_anim = selection_anim_init('selection_anim')"&gt;Initialize&lt;/button&gt;
&lt;button onclick="selection_anim_anim.run('selection_anim_anim')"&gt;Run&lt;/button&gt;
&lt;button onclick="selection_anim_anim.stop()"&gt;Stop&lt;/button&gt; &lt;/br&gt;
&lt;button onclick="selection_anim_anim.begin()"&gt;Beginning&lt;/button&gt;
&lt;button onclick="selection_anim_anim.forward()"&gt;Step Forward&lt;/button&gt;
&lt;button onclick="selection_anim_anim.backward()"&gt;Step Backward&lt;/button&gt;
&lt;button onclick="selection_anim_anim.end()"&gt;End&lt;/button&gt;

&lt;script&gt;
selection_anim_init = function(divid)
{
   var a = new Animator(new SelectionSortModel(), new BarViewer(), divid)
   a.init()
   return a
}
&lt;/script&gt;

&lt;/div&gt;
</raw>
  <!--For more detail, CodeLens 3 allows you to step through the algorithm.-->
  <!---->
  <!---->
  <!--.. codelens:: selectionsortcodetrace-->
  <!--:caption: Tracing the Selection Sort-->
  <!---->
  <!--def selection_sort(a_list):-->
  <!--for i, item in enumerate(a_list):-->
  <!--min_idx = len(a_list) - 1-->
  <!--for j in range(i, len(a_list)):-->
  <!--if a_list[j] < a_list[min_idx]:-->
  <!--min_idx = j-->
  <!--if min_idx != i:-->
  <!--a_list[min_idx], a_list[i] = a_list[i], a_list[min_idx]-->
  <!---->
  <!--a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]-->
  <!--selection_sort(a_list)-->
  <!--print(a_list)-->
  <p>You may see that the selection sort makes the same number of comparisons
            as the bubble sort and is therefore also <math>O(n^{2})</math>. However,
            due to the reduction in the number of exchanges, the selection sort
            typically executes faster in benchmark studies. In fact, for our list,
            the bubble sort makes 20 exchanges, while the selection sort makes only
            8.</p>
  <note>
    <title>Self Check</title>
    <exercise label="question_sort_2">
      <statement>
        <p>Q-3: Suppose you have the following list of numbers to sort:
                [11, 7, 12, 14, 19, 1, 6, 18, 8, 20] which list represents the partially sorted list after three complete passes of selection sort?</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>[7, 11, 12, 1, 6, 14, 8, 18, 19, 20]</p>
          </statement>
          <feedback>
            <p>Selection sort is similar to bubble sort (which you appear to have done) but uses fewer swaps</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[7, 11, 12, 14, 19, 1, 6, 18, 8, 20]</p>
          </statement>
          <feedback>
            <p>This looks like an insertion sort.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[11, 7, 12, 14, 1, 6, 8, 18, 19, 20]</p>
          </statement>
          <feedback>
            <p>This one looks similar to the correct answer but instead of swapping the numbers have been shifted to the left to make room for the correct numbers.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>[11, 7, 12, 14, 8, 1, 6, 18, 19, 20]</p>
          </statement>
          <feedback>
            <p>Selection sort improves upon bubble sort by making fewer swaps.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </note>
</section>
