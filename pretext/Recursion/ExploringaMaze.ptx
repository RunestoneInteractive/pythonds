<?xml version="1.0"?>
<section xml:id="recursion_exploring-a-maze">
  <title>Exploring a Maze</title>
  <p>In this section we will look at a problem that has relevance to the
            expanding world of robotics: how do you find your way out of a maze? If you have
            a Roomba vacuum cleaner for your dorm room (don't all college students?)
            you will wish that you could reprogram it using what you have learned in
            this section. The problem we want to solve is to help our turtle find
            its way out of a virtual maze. The maze problem has roots as deep as the
            Greek myth about Theseus, who was sent into a maze to kill the Minotaur.
            Theseus used a ball of thread to help him find his way back out again
            once he had finished off the beast. In our problem we will assume that
            our turtle is dropped down somewhere into the middle of the maze and
            must find its way out. Look at <xref ref="recursion_fig-mazescreen"/> to get an idea of
            where we are going in this section.</p>
  <listing xml:id="recursion_fig-mazescreen"><pre>++++++++++++++++++++++
+   +   ++ ++     +
+ +   +       +++ + ++
+ + +  ++  ++++   + ++
+++ ++++++    +++ +  +
+          ++  ++    +
+++++ ++++++   +++++ +
+     +   +++++++  + +
+ +++++++      S +   +
+                + +++
++++++++++++++++++ +++</pre></listing>
  <p>To make this even more interesting we are going to use the <c>turtle</c>
            module to draw and explore our maze so we can watch this algorithm in
            action. The <c>Maze</c> object will provide the following methods for us to use
            in writing our search algorithm:</p>
  <p>
    <ul>
      <li>
        <p><c>__init__</c> Reads in a data file representing a maze, initializes
                    the internal representation of the maze, and finds the starting
                    position for the turtle.</p>
      </li>
      <li>
        <p><c>draw_maze</c> Draws the maze in a window on the screen.</p>
      </li>
      <li>
        <p><c>update_position</c> Updates the internal representation of the maze
                    and changes the position of the turtle in the window.</p>
      </li>
      <li>
        <p><c>is_exit</c> Checks to see if the current position is an exit from the
                    maze.</p>
      </li>
    </ul>
  </p>
  <p>The <c>Maze</c> class also overloads the index operator <c>[]</c> so that our
            algorithm can easily access the status of any particular square.</p>
  <p><xref ref="recursion_lst-maze-globals"/> includes the global constants used by the <c>Maze</c> class methods
            (Listings <xref ref="recursion_lst-maze-init"/>&#x2013;<xref ref="recursion_lst-maze-aux"/>) and the <c>search_from</c> function (<xref ref="recursion_lst-maze-search"/>).</p>
  <listing xml:id="recursion_lst-maze-globals"><program language="python">
    <input>
START = "S"
OBSTACLE = "+"
TRIED = "."
DEAD_END = "-"
PART_OF_PATH = "O"
</input>
  </program></listing>
  <p>The <c>__init__</c> method takes the name of a file as its
            only parameter. This file is a text file that represents a maze by using
            <q>+</q> characters for walls, spaces for open squares, and the letter <q>S</q> to
            indicate the starting position.</p>
  <listing xml:id="recursion_lst-maze-init"><program language="python">
    <input>
class Maze:
    def __init__(self, maze_filename):
        with open(maze_filename, "r") as maze_file:
            self.maze_list = [
                [ch for ch in line.rstrip("\n")]
                for line in maze_file.readlines()
            ]
        self.rows_in_maze = len(self.maze_list)
        self.columns_in_maze = len(self.maze_list[0])
        for row_idx, row in enumerate(self.maze_list):
            if START in row:
                self.start_row = row_idx
                self.start_col = row.index(START)
                break

        self.x_translate = -self.columns_in_maze / 2
        self.y_translate = self.rows_in_maze / 2
        self.t = turtle.Turtle()
        self.t.shape("turtle")
        self.wn = turtle.Screen()
        self.wn.setworldcoordinates(
            -(self.columns_in_maze - 1) / 2 - 0.5,
            -(self.rows_in_maze - 1) / 2 - 0.5,
            (self.columns_in_maze - 1) / 2 + 0.5,
            (self.rows_in_maze - 1) / 2 + 0.5,
        )
</input>
  </program></listing>
  <p>The internal representation of the maze is a list of
            lists. Each row of the <c>maze_list</c> instance variable is also a list.
            This secondary list contains one character per square using the
            characters described above. For the data file in <xref ref="recursion_fig-exmaze"/> the
            internal representation looks like the following:</p>
  <program language="python">
    <input>
[  ['+', '+', '+', '+', '+', ..., '+', '+', '+', '+', '+']
   ['+', ' ', ' ', ' ', '+', ..., ' ', '+', ' ', ' ', ' ']
   ['+', ' ', '+', ' ', ' ', ..., ' ', '+', ' ', '+', '+']
   ['+', ' ', '+', ' ', '+', ..., ' ', '+', ' ', '+', '+']
   ['+', '+', '+', ' ', '+', ..., ' ', '+', ' ', ' ', '+']
   ['+', ' ', ' ', ' ', ' ', ..., ' ', ' ', ' ', ' ', '+']
   ['+', '+', '+', '+', '+', ..., '+', '+', '+', ' ', '+']
   ['+', ' ', ' ', ' ', ' ', ..., ' ', ' ', '+', ' ', '+']
   ['+', ' ', '+', '+', '+', ..., '+', ' ', ' ', ' ', '+']
   ['+', ' ', ' ', ' ', ' ', ..., '+', ' ', '+', '+', '+']
   ['+', '+', '+', '+', '+', ..., '+', ' ', '+', '+', '+'] ]
</input>
  </program>
  <p>The <c>draw_maze</c> method uses this internal representation to draw the
            initial view of the maze on the screen (<xref ref="recursion_fig-mazescreen"/>).</p>
  <listing xml:id="recursion_lst-maze-draw"><program language="python">
    <input>
def draw_maze(self):
    self.t.speed(10)
    self.wn.tracer(0)
    for y in range(self.rows_in_maze):
        for x in range(self.columns_in_maze):
            if self.maze_list[y][x] == OBSTACLE:
                self.draw_centered_box(
                    x + self.x_translate, -y + self.y_translate, "orange"
                )
    self.t.color("black")
    self.t.fillcolor("blue")
    self.wn.update()
    self.wn.tracer(1)

def draw_centered_box(self, x, y, color):
    self.t.up()
    self.t.goto(x - 0.5, y - 0.5)
    self.t.color(color)
    self.t.fillcolor(color)
    self.t.setheading(90)
    self.t.down()
    self.t.begin_fill()
    for i in range(4):
        self.t.forward(1)
        self.t.right(90)
    self.t.end_fill()
</input>
  </program></listing>
  <p>The <c>update_position</c> method, as shown in <xref ref="recursion_lst-maze-update"/> uses the
            same internal representation to see if the turtle has run into a wall.
            It also updates the internal representation with a <q>.</q> or <q>-</q> to
            indicate that the turtle has visited a particular square or if the
            square is part of a dead end. In addition, the <c>update_position</c> method
            uses two helper methods, <c>move_turtle</c> and <c>drop_bread_crumb</c>, to
            update the view on the screen.</p>
  <listing xml:id="recursion_lst-maze-update"><program language="python">
    <input>
def update_position(self, row, col, val=None):
    if val:
        self.maze_list[row][col] = val
    self.move_turtle(col, row)

    if val == PART_OF_PATH:
        color = "green"
    elif val == OBSTACLE:
        color = "red"
    elif val == TRIED:
        color = "black"
    elif val == DEAD_END:
        color = "red"
    else:
        color = None

    if color:
        self.drop_bread_crumb(color)

def move_turtle(self, x, y):
    self.t.up()
    self.t.setheading(self.t.towards(x + self.x_translate, -y + self.y_translate))
    self.t.goto(x + self.x_translate, -y + self.y_translate)

def drop_bread_crumb(self, color):
    self.t.dot(10, color)
</input>
  </program></listing>
  <p>Finally, the <c>is_exit</c> method uses the current position of the turtle
            to test for an exit condition. An exit condition occurs whenever the turtle
            has navigated to the edge of the maze, either row zero or column zero,
            or the far-right column or the bottom row.</p>
  <listing xml:id="recursion_lst-maze-aux"><program language="python">
    <input>
def is_exit(self, row, col):
    return (
        row == 0
        or row == self.rows_in_maze - 1
        or col == 0
        or col == self.columns_in_maze - 1
    )

def __getitem__(self, idx):
    return self.maze_list[idx]
</input>
  </program></listing>
  <p>Let's examine the code for the search function which we call
            <c>search_from</c>. The code is shown in <xref ref="recursion_lst-maze-search"/>. Notice
            that this function takes three parameters: a <c>Maze</c> object, the starting
            row, and the starting column. This is important because as a recursive
            function the search logically starts again with each recursive call.</p>
  <listing xml:id="recursion_lst-maze-search"><program language="python">
    <input>
def search_from(maze, row, column):
    # Try each of four directions from this point until we find a way out.
    maze.update_position(row, column)
    # Base Case return values:
    #  1. We have run into an obstacle, return false
    if maze[row][column] == OBSTACLE:
        return False
    #  2. We have found an already explored square
    if maze[row][column] in [TRIED, DEAD_END]:
        return False
    # 3. We have found an exit
    if maze.is_exit(row, column):
        maze.update_position(row, column, PART_OF_PATH)
        return True
    maze.update_position(row, column, TRIED)
    # Otherwise, use logical short circuiting to try each direction
    # in turn (if needed)
    found = (
        search_from(maze, row - 1, column)
        or search_from(maze, row + 1, column)
        or search_from(maze, row, column - 1)
        or search_from(maze, row, column + 1)
    )
    if found:
        maze.update_position(row, column, PART_OF_PATH)
    else:
        maze.update_position(row, column, DEAD_END)
    return found
</input>
  </program></listing>
  <p>As you look through the algorithm you will see that the first thing the
            code does (line 3) is call <c>update_position</c>. This is simply to help
            you visualize the algorithm so that you can watch exactly how the turtle
            explores its way through the maze. Next the algorithm checks for the
            first three of the four base cases: Has the turtle run into a wall (lines
            6)? Has the turtle circled back to a square already explored (line 9)?
            Has the turtle found an exit (line 12)? If none of these conditions is
            true then we continue the search recursively.</p>
  <p>You will notice that in the recursive step there are four recursive
            calls to <c>search_from</c>. It is hard to predict how many of these
            recursive calls will be used since they are all connected by <c>or</c>
            statements. If the first call to <c>search_from</c> returns <c>True</c> then
            none of the last three calls would be needed. You can interpret this as
            meaning that a step to <c>(row - 1, column)</c> (or north if you want to think
            geographically) is on the path leading out of the maze. If there is not
            a good path leading out of the maze to the north then the next recursive
            call is tried, this one to the south. If south fails then try west, and
            finally east. If all four recursive calls return <c>False</c> then we have
            found a dead end. You should download or type in the whole program and
            experiment with it by changing the order of these calls.</p>
  <p>The complete program is shown in <xref ref="recursion_completemaze"/>.  This program uses the data file <c>maze2.txt</c> shown below.
            Note that it is a much more simple example file in that the exit is very close to the starting position of the turtle.</p>
  <raw format="html" xml:space="preserve">      &lt;pre id="maze2.txt"&gt;
++++++++++++++++++++++
+   +   ++ ++        +
      +     ++++++++++
+ +    ++  ++++ +++ ++
+ +   + + ++    +++  +
+          ++  ++  + +
+++++ + +      ++  + +
+++++ +++  + +  ++   +
+          + + S+ +  +
+++++ +  + + +     + +
++++++++++++++++++++++
  &lt;/pre&gt;</raw>
  <program xml:id="recursion_completemaze" interactive="activecode" language="python">
    <input>
import turtle

START = "S"
OBSTACLE = "+"
TRIED = "."
DEAD_END = "-"
PART_OF_PATH = "O"


class Maze:
    def __init__(self, maze_filename):
        with open(maze_filename, "r") as maze_file:
            self.maze_list = [
                [ch for ch in line.rstrip("\n")]
                for line in maze_file.readlines()
            ]
        self.rows_in_maze = len(self.maze_list)
        self.columns_in_maze = len(self.maze_list[0])
        for row_idx, row in enumerate(self.maze_list):
            if START in row:
                self.start_row = row_idx
                self.start_col = row.index(START)
                break

        self.x_translate = -self.columns_in_maze / 2
        self.y_translate = self.rows_in_maze / 2
        self.t = turtle.Turtle()
        self.t.shape("turtle")
        self.wn = turtle.Screen()
        self.wn.setworldcoordinates(
            -(self.columns_in_maze - 1) / 2 - 0.5,
            -(self.rows_in_maze - 1) / 2 - 0.5,
            (self.columns_in_maze - 1) / 2 + 0.5,
            (self.rows_in_maze - 1) / 2 + 0.5,
        )

    def draw_maze(self):
        self.t.speed(10)
        self.wn.tracer(0)
        for y in range(self.rows_in_maze):
            for x in range(self.columns_in_maze):
                if self.maze_list[y][x] == OBSTACLE:
                    self.draw_centered_box(
                        x + self.x_translate, -y + self.y_translate, "orange"
                    )
        self.t.color("black")
        self.t.fillcolor("blue")
        self.wn.update()
        self.wn.tracer(1)

    def draw_centered_box(self, x, y, color):
        self.t.up()
        self.t.goto(x - 0.5, y - 0.5)
        self.t.color(color)
        self.t.fillcolor(color)
        self.t.setheading(90)
        self.t.down()
        self.t.begin_fill()
        for i in range(4):
            self.t.forward(1)
            self.t.right(90)
        self.t.end_fill()

    def move_turtle(self, x, y):
        self.t.up()
        self.t.setheading(self.t.towards(x + self.x_translate, -y + self.y_translate))
        self.t.goto(x + self.x_translate, -y + self.y_translate)

    def drop_bread_crumb(self, color):
        self.t.dot(10, color)

    def update_position(self, row, col, val=None):
        if val:
            self.maze_list[row][col] = val
        self.move_turtle(col, row)

        if val == PART_OF_PATH:
            color = "green"
        elif val == OBSTACLE:
            color = "red"
        elif val == TRIED:
            color = "black"
        elif val == DEAD_END:
            color = "red"
        else:
            color = None

        if color:
            self.drop_bread_crumb(color)

    def is_exit(self, row, col):
        return (
            row == 0
            or row == self.rows_in_maze - 1
            or col == 0
            or col == self.columns_in_maze - 1
        )

    def __getitem__(self, idx):
        return self.maze_list[idx]


def search_from(maze, start_row, start_column):
    # try each of four directions from this point until we find a way out.
    # base Case return values:
    #  1. We have run into an obstacle, return false
    maze.update_position(start_row, start_column)
    if maze[start_row][start_column] == OBSTACLE:
        return False
    #  2. We have found a square that has already been explored
    if (
        maze[start_row][start_column] == TRIED
        or maze[start_row][start_column] == DEAD_END
    ):
        return False
    # 3. We have found an outside edge not occupied by an obstacle
    if maze.is_exit(start_row, start_column):
        maze.update_position(start_row, start_column, PART_OF_PATH)
        return True
    maze.update_position(start_row, start_column, TRIED)
    # Otherwise, use logical short circuiting to try each direction
    # in turn (if needed)
    found = (
        search_from(maze, start_row - 1, start_column)
        or search_from(maze, start_row + 1, start_column)
        or search_from(maze, start_row, start_column - 1)
        or search_from(maze, start_row, start_column + 1)
    )
    if found:
        maze.update_position(start_row, start_column, PART_OF_PATH)
    else:
        maze.update_position(start_row, start_column, DEAD_END)
    return found


my_maze = Maze("maze2.txt")
my_maze.draw_maze()
my_maze.update_position(my_maze.start_row, my_maze.start_col)

search_from(my_maze, my_maze.start_row, my_maze.start_col)
        </input>
  </program>
  <note>
    <title>Self Check</title>
    <p>Modify the maze search program so that the calls to <c>search_from</c> are in a different order.
                Watch the program run. Can you explain why the behavior is different?
                Can you predict what path the turtle will follow for a given change in order?</p>
  </note>
</section>
