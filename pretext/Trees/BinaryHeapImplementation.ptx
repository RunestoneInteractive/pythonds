<?xml version="1.0"?>
<section xml:id="trees_binary-heap-implementation">
  <title>Binary Heap Implementation</title>
  <subsection xml:id="trees_the-structure-property">
    <title>The Structure Property</title>
    <p>In order to make our heap work efficiently, we will take advantage of
                the logarithmic nature of the binary tree to represent our heap. In order to guarantee logarithmic
                performance, we must keep our tree balanced. A balanced binary tree has
                roughly the same number of nodes in the left and right subtrees of the
                root. In our heap implementation we keep the tree balanced by creating a
                <term>complete binary tree</term>. A complete binary tree is a tree in which each
                level has all of its nodes. The exception to this is the bottom level of
                the tree, which we fill in from left to right. <xref ref="i19_id1fig-comptree"/>
                shows an example of a complete binary tree.</p>
    <figure align="center" xml:id="i19_id1fig-comptree">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A Complete Binary Tree</caption>
      <image source="Trees/Figures/compTree.png" width="50%" alt="image"/>
    </figure>
    <p>Another interesting property of a complete tree is that we can represent
                it using a single list. We do not need to use nodes and references or
                even lists of lists. Because the tree is complete, the left child of a
                parent (at position <m>p</m>) is the node that is found in position
                <m>2p + 1</m> in the list. Similarly, the right child of the parent is at
                position <m>2p + 2</m> in the list. To find the parent of any node in
                the tree, we can simply use Python's integer division. Given that a node
                is at position <m>n</m> in the list, the parent is at position
                <m>(n - 1) // 2</m>. <xref ref="i19_id2fig-heaporder"/> shows a complete binary tree
                and also gives the list representation of the tree.  Note the <m>2p + 1</m> and <m>2p + 2</m> relationship between
                parent and children. The list
                representation of the tree, along with the full structure property,
                allows us to efficiently traverse a complete binary tree using only a
                few simple mathematical operations. We will see that this also leads to
                an efficient implementation of our binary heap.</p>
  </subsection>
  <subsection xml:id="trees_the-heap-order-property">
    <title>The Heap Order Property</title>
    <p>The method that we will use to store items in a heap relies on
                maintaining the heap order property. The <term>heap order property</term> is as
                follows: in a heap, for every node <m>x</m> with parent <m>p</m>,
                the key in <m>p</m> is smaller than or equal to the key in
                <m>x</m>. <xref ref="i19_id2fig-heaporder"/> also illustrates a complete binary
                tree that has the heap order property.</p>
    <figure align="center" xml:id="i19_id2fig-heaporder">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: A Complete Binary Tree, along with Its List Representation</caption>
      <image source="Trees/Figures/heapOrder.png" width="50%" alt="image"/>
    </figure>
  </subsection>
  <subsection xml:id="trees_heap-operations">
    <title>Heap Operations</title>
    <p>We will begin our implementation of a binary heap with the constructor.
                Since the entire binary heap can be represented by a single list, all
                the constructor will do is initialize the list.
                <xref ref="trees_lst-heap1a"/> shows the Python code for the constructor.</p>
    <p xml:id="trees_lst-heap1a" names="lst_heap1a">
      <term>Listing 1</term>
    </p>
    <pre>class BinaryHeap:
    def __init__(self):
        self._heap = []</pre>
    <p>The next method we will implement is <c>insert</c>. The easiest, and most
                efficient, way to add an item to a list is to simply append the item to
                the end of the list. The good news about appending is that it guarantees
                that we will maintain the complete tree property. The bad news about
                appending is that we will very likely violate the heap structure
                property. However, it is possible to write a method that will allow us
                to regain the heap structure property by comparing the newly added item
                with its parent. If the newly added item is less than its parent, then
                we can swap the item with its parent. <xref ref="fig-percup"/> shows the
                series of swaps needed to percolate the newly added item up to its
                proper position in the tree.</p>
    <figure align="center" xml:id="file_32_id3">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Percolate the New Node up to Its Proper Position</caption>
      <image source="Trees/Figures/percUp.png" width="50%" alt="image"/>
    </figure>
    <p>Notice that when we percolate an item up, we are restoring the heap
                property between the newly added item and the parent. We are also
                preserving the heap property for any siblings. Of course, if the newly
                added item is very small, we may still need to swap it up another level.
                In fact, we may need to keep swapping until we get to the top of the
                tree. <xref ref="trees_lst-heap2"/> shows the <c>_perc_up</c> method, which
                percolates a new item as far up in the tree as it needs to go to
                maintain the heap property. We used a leading underscore (<c>_</c>) in
                the name of the method as it is an internal operation.
                The parent of the current node
                can be computed by subtracting 1 from the index of the current node and dividing the result by 2.</p>
    <p>We are now ready to write the <c>insert</c> method (see <xref ref="trees_lst-heap3"/>). Most of the work in the
                <c>insert</c> method is really done by <c>_perc_up</c>. Once a new item is
                appended to the tree, <c>_perc_up</c> takes over and positions the new item
                properly.</p>
    <p xml:id="trees_lst-heap2" names="lst_heap2">
      <term>Listing 2</term>
    </p>
    <pre>def _perc_up(self, i):
    while (i - 1) // 2 &gt;= 0:
        parent_idx = (i - 1) // 2
        if self._heap[i] &lt; self._heap[parent_idx]:
            self._heap[i], self._heap[parent_idx] = (
                self._heap[parent_idx],
                self._heap[i],
            )
        i = parent_idx</pre>
    <p xml:id="trees_lst-heap3" names="lst_heap3">
      <term>Listing 3</term>
    </p>
    <pre>def insert(self, item):
    self._heap.append(item)
    self._perc_up(len(self._heap) - 1)</pre>
    <p>With the <c>insert</c> method properly defined, we can now look at the
                <c>delete</c> method. Since the heap property requires that the root of the
                tree be the smallest item in the tree, finding the minimum item is easy.
                The hard part of <c>delete</c> is restoring full compliance with the heap
                structure and heap order properties after the root has been removed. We
                can restore our heap in two steps. First, we will restore the root item
                by taking the last item in the list and moving it to the root position.
                Moving the last item maintains our heap structure property. However, we
                have probably destroyed the heap order property of our binary heap.
                Second, we will restore the heap order property by pushing the new root
                node down the tree to its proper position. <xref ref="fig-perc-down"/> shows
                the series of swaps needed to move the new root node to its proper
                position in the heap.</p>
    <figure align="center" xml:id="file_32_id4">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: Percolating the Root Node down the Tree</caption>
      <image source="Trees/Figures/percDown.png" width="50%" alt="image"/>
    </figure>
    <p>In order to maintain the heap order property, all we need to do is swap
                the root with its smaller child that is less than the root. After the initial
                swap, we may repeat the swapping process with a node and its children
                until the node is swapped into a position on the tree where it is
                already less than both children. The code for percolating a node down
                the tree is found in the <c>_perc_down</c> and <c>_get_min_child</c> methods in
                <xref ref="trees_lst-heap4"/>.</p>
    <p xml:id="trees_lst-heap4" names="lst_heap4">
      <term>Listing 4</term>
    </p>
    <pre>def _perc_down(self, i):
    while 2 * i + 1 &lt; len(self._heap):
        sm_child = self._get_min_child(i)
        if self._heap[i] &gt; self._heap[sm_child]:
            self._heap[i], self._heap[sm_child] = (
                self._heap[sm_child],
                self._heap[i],
            )
        else:
            break
        i = sm_child

def _get_min_child(self, i):
    if 2 * i + 2 &gt; len(self._heap) - 1:
        return 2 * i + 1
    if self._heap[2 * i + 1] &lt; self._heap[2 * i + 2]:
        return 2 * i + 1
    return 2 * i + 2</pre>
    <p>The code for the <c>delete</c> operation is in <xref ref="trees_lst-heap5"/>. Note
                that once again the hard work is handled by a helper function, in this
                case <c>_perc_down</c>.</p>
    <p xml:id="trees_lst-heap5" names="lst_heap5">
      <term>Listing 5</term>
    </p>
    <pre>def delete(self):
    self._heap[0], self._heap[-1] = self._heap[-1], self._heap[0]
    result = self._heap.pop()
    self._perc_down(0)
    return result</pre>
    <p>To finish our discussion of binary heaps, we will look at a method to
                build an entire heap from a list of keys. The first method you might
                think of may be like the following. Given a list of keys, you could
                easily build a heap by inserting each key one at a time. Since you are
                starting with an empy list, it is sorted and you could use
                binary search to find the right position to insert the next key at a
                cost of approximately <m>O(\log{n})</m> operations. However, remember
                that inserting an item in the middle of the list may require
                <m>O(n)</m> operations to shift the rest of the list over to make
                room for the new key. Therefore, to insert <m>n</m> keys into the
                heap would require a total of <m>O(n \log{n})</m> operations.
                However, if we start with an entire list then we can build the whole
                heap in <m>O(n)</m> operations. <xref ref="trees_lst-heap6"/> shows the code
                to build the entire heap.</p>
    <p xml:id="trees_lst-heap6" names="lst_heap6">
      <term>Listing 6</term>
    </p>
    <pre>def heapify(self, not_a_heap):
    self._heap = not_a_heap[:]
    i = len(self._heap) // 2 - 1
    while i &gt;= 0:
        self._perc_down(cuir_idx)
        i = i - 1</pre>
    <figure align="center" xml:id="file_32_id5">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Building a Heap from the List [9, 6, 5, 2, 3]</caption>
      <image source="Trees/Figures/buildheap.png" width="50%" alt="image"/>
    </figure>
    <p><xref ref="fig-buildheap"/> shows the swaps that the <c>hepify</c> method
                makes as it moves the nodes in an initial tree of [9, 6, 5, 2, 3] into
                their proper positions. Although we start out in the middle of the tree
                and work our way back toward the root, the <c>_perc_down</c> method ensures
                that the largest child is always moved down the tree. Because the heap is a
                complete binary tree, any nodes past the halfway point will be leaves
                and therefore have no children. Notice that when <c>i = 0</c>, we are
                percolating down from the root of the tree, so this may require multiple
                swaps. As you can see in the rightmost two trees of
                <xref ref="fig-buildheap"/>, first the 9 is moved out of the root position,
                but after 9 is moved down one level in the tree, <c>_perc_down</c> ensures
                that we check the next set of children farther down in the tree to
                ensure that it is pushed as low as it can go. In this case it results in
                a second swap with 3. Now that 9 has been moved to the lowest level of
                the tree, no further swapping can be done. It is useful to compare the
                list representation of this series of swaps with the tree representation
                shown in <xref ref="fig-buildheap"/></p>
    <pre>start  [9, 6, 5, 2, 3]
i = 1  [9, 2, 5, 6, 3]
i = 0  [2, 3, 5, 6, 9]</pre>
    <p>The complete binary heap implementation can be seen in ActiveCode 1.</p>
    <program xml:id="completeheap" interactive="activecode" language="python">
      <input>
class BinaryHeap:
    def __init__(self):
        self._heap = []

    def _perc_up(self, cur_idx):
        while (cur_idx - 1) // 2 &gt;= 0:
            parent_idx = (cur_idx - 1) // 2
            if self._heap[cur_idx] &lt; self._heap[parent_idx]:
                self._heap[cur_idx], self._heap[parent_idx] = (
                    self._heap[parent_idx],
                    self._heap[cur_idx],
                )
            cur_idx = parent_idx

    def _perc_down(self, cur_idx):
        while 2 * cur_idx + 1 &lt; len(self._heap):
            min_child_idx = self._get_min_child(cur_idx)
            if self._heap[cur_idx] &gt; self._heap[min_child_idx]:
                self._heap[cur_idx], self._heap[min_child_idx] = (
                    self._heap[min_child_idx],
                    self._heap[cur_idx],
                )
            else:
                return
            cur_idx = min_child_idx

    def _get_min_child(self, parent_idx):
        if 2 * parent_idx + 2 &gt; len(self._heap) - 1:
            return 2 * parent_idx + 1
        if self._heap[2 * parent_idx + 1] &lt; self._heap[2 * parent_idx + 2]:
            return 2 * parent_idx + 1
        return 2 * parent_idx + 2

    def heapify(self, not_a_heap):
        self._heap = not_a_heap[:]
        cur_idx = len(self._heap) // 2 - 1
        while cur_idx &gt;= 0:
            self._perc_down(cur_idx)
            cur_idx = cur_idx - 1

    def get_min(self):
        return self._heap[0]

    def insert(self, item):
        self._heap.append(item)
        self._perc_up(len(self._heap) - 1)

    def delete(self):
        self._heap[0], self._heap[-1] = self._heap[-1], self._heap[0]
        result = self._heap.pop()
        self._perc_down(0)
        return result

    def is_empty(self):
        return not bool(self._heap)

    def __len__(self):
        return len(self._heap)

    def __str__(self):
        return str(self._heap)

a_heap = BinaryHeap()
a_heap.heapify([9, 5, 6, 2, 3])

while not a_heap.is_empty():
    print(a_heap.delete())
        </input>
    </program>
    <p>The assertion that we can build the heap in <m>O(n)</m> may seem a
                bit mysterious at first, and a proof is beyond the scope of this book.
                However, the key to understanding that you can build the heap in
                <m>O(n)</m> is to remember that the <m>\log{n}</m> factor is
                derived from the height of the tree. For most of the work in
                <c>heapify</c>, the tree is shorter than <m>\log{n}</m>.</p>
    <p>Using the fact that you can build a heap from a list in <m>O(n)</m>
                time, you will construct a sorting algorithm that uses a heap and sorts
                a list in <m>O(n\log{n})</m> as an exercise at the end of this
                chapter.</p>
  </subsection>
</section>
