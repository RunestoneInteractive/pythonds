<?xml version="1.0"?>
<section xml:id="trees_nodes-and-references">
  <title>Nodes and References</title>
  <p>Our second method to represent a tree uses nodes and references. In this
            case we will define a class that has attributes for the root value as
            well as the left and right subtrees. Using nodes and references,
            we might think of the tree as being structured like the one shown in <xref ref="i14_id1fig-treerec"/>.
            Since this representation more
            closely follows the object-oriented programming paradigm, we will
            continue to use this representation for the remainder of the chapter.</p>
  <figure align="center" xml:id="i14_id1fig-treerec">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: A Simple Tree Using a Nodes and References Approach</caption>
    <image source="Trees/Figures/treerecs.png" width="50%" alt="image"/>
  </figure>
  <p>We will start out with a simple class definition for the nodes and
            references approach as shown in <xref ref="trees_lst-nar"/>. The important thing
            to remember about this representation is that the attributes <c>left_child</c>
            and <c>right_child</c> will become references to other instances of the
            <c>BinaryTree</c> class. For example, when we insert a new left child into
            the tree, we create another instance of <c>BinaryTree</c> and modify
            <c>self.left_child</c> in the root to reference the new tree.</p>
  <listing xml:id="trees_lst-nar"><pre>class BinaryTree:
    def __init__(self, root_obj):
        self.key = root_obj
        self.left_child = None
        self.right_child = None</pre></listing>
  <p>Notice that in <xref ref="trees_lst-nar"/>, the constructor function expects to
            get some kind of object to store in the root. Just as you can store
            any object you like in a list, the root object of a tree can be a
            reference to any object. For our early examples, we will store the name
            of the node as the root value. Using nodes and references to represent
            the tree in <xref ref="i14_id1fig-treerec"/>, we would create six instances of the
            <c>BinaryTree</c> class.</p>
  <p>Next let's look at the functions we need to build the tree beyond the
            root node. To add a left child to the tree, we will create a new binary
            tree object and set the <c>left_child</c> attribute of the root to refer to this
            new object. The code for <c>insert_left</c> is shown in
            <xref ref="trees_lst-insl"/>.</p>
  <listing xml:id="trees_lst-insl"><program language="python">
    <input>
def insert_left(self, new_node):
    if self.left_child is None:
        self.left_child = BinaryTree(new_node)
    else:
        new_child = BinaryTree(new_node)
        new_child.left_child = self.left_child
        self.left_child = new_child
</input>
  </program></listing>
  <p>We must consider two cases for insertion. The first case is
            characterized by a node with no existing left child. When there is no
            left child, simply add a node to the tree. The second case is
            characterized by a node with an existing left child. In the second
            case, we insert a node and push the existing child down one level in the
            tree. The second case is handled by the <c>else</c> statement on line
            4 of <xref ref="trees_lst-insl"/>.</p>
  <p>The code for <c>insert_right</c> must consider a symmetric set of cases.
            There will either be no right child, or we must insert the node between
            the root and an existing right child. The insertion code is shown in
            <xref ref="trees_lst-insr"/>.</p>
  <listing xml:id="trees_lst-insr"><program language="python">
    <input>
def insert_right(self, new_node):
    if self.right_child == None:
        self.right_child = BinaryTree(new_node)
    else:
        new_child = BinaryTree(new_node)
        new_child.right_child = self.right_child
        self.right_child = new_child
</input>
  </program></listing>
  <p>To round out the definition for a simple binary tree data structure, we
            will write accessor methods for the left and right children and for
            the root values (see <xref ref="trees_lst-naracc"/>) .</p>
  <listing xml:id="trees_lst-naracc"><program language="python">
    <input>
def get_root_val(self):
    return self.key

def set_root_val(self, new_obj):
    self.key = new_obj

def get_left_child(self):
    return self.left_child

def get_right_child(self):
    return self.right_child
</input>
  </program></listing>
  <p>Now that we have all the pieces to create and manipulate a binary tree,
            let's use them to check on the structure a bit more. Let's make a simple
            tree with node a as the root, and add nodes <q>b</q> and <q>c</q> as children. <xref ref="lst-comptest"/> creates the tree and looks at the some of the
            values stored in <c>key</c>, <c>left_child</c>, and <c>right_child</c>. Notice that both the
            left and right children of the root are themselves distinct instances of
            the <c>BinaryTree</c> class. As we said in our original recursive
            definition for a tree, this allows us to treat any child of a binary
            tree as a binary tree itself.</p>
<listing xml:id="lst-comptest">
  <program interactive="activecode" language="python">
    <input>
class BinaryTree:
    def __init__(self, root_obj):
        self.key = root_obj
        self.left_child = None
        self.right_child = None

    def insert_left(self, new_node):
        if self.left_child is None:
            self.left_child = BinaryTree(new_node)
        else:
            new_child = BinaryTree(new_node)
            new_child.left_child = self.left_child
            self.left_child = new_child

    def insert_right(self, new_node):
        if self.right_child == None:
            self.right_child = BinaryTree(new_node)
        else:
            new_child = BinaryTree(new_node)
            new_child.right_child = self.right_child
            self.right_child = new_child

    def get_root_val(self):
        return self.key

    def set_root_val(self, new_obj):
        self.key = new_obj

    def get_left_child(self):
        return self.left_child

    def get_right_child(self):
        return self.right_child


a_tree = BinaryTree("a")
print(a_tree.get_root_val())
print(a_tree.get_left_child())
a_tree.insert_left("b")
print(a_tree.get_left_child())
print(a_tree.get_left_child().get_root_val())
a_tree.insert_right("c")
print(a_tree.get_right_child())
print(a_tree.get_right_child().get_root_val())
a_tree.get_right_child().set_root_val("hello")
print(a_tree.get_right_child().get_root_val())
        </input>
  </program>
</listing>
  <note>
    <title>Self Check</title>
    <exercise label="mctree_3">
      <statement>
        <p>Write a function <c>build_tree</c> that returns a tree using the nodes and references implementation that looks like this:</p>
        <image source="Trees/Figures/tree_ex.png" width="50%"/>
      </statement>
      <program xml:id="mctree_3_editor" interactive="activecode" language="python">
        <input>
from test import testEqual

def build_tree():
    pass

ttree = build_tree()

testEqual(ttree.get_right_child().get_root_val(), "c")
testEqual(ttree.get_left_child().get_right_child().get_root_val(), "d")
testEqual(ttree.get_right_child().get_left_child().get_root_val(), "e")
        </input>
      </program>
    </exercise>
  </note>
</section>
