<?xml version="1.0"?>
<section xml:id="trees_priority-queues-with-binary-heaps">
  <title>Priority Queues with Binary Heaps</title>
  <p>In earlier sections you learned about the first in, first out data
            structure called a queue. One important variation of a queue is called a
            <term>priority queue</term>. A priority queue acts like a queue in that you
            dequeue an item by removing it from the front. However, in a priority
            queue the logical order of items inside a queue is determined by their
            priority. The highest priority items are at the front of the queue and
            the lowest priority items are at the back. Thus when you enqueue an item
            on a priority queue, the new item may move all the way to the front. We
            will see that the priority queue is a useful data structure for some of
            the graph algorithms we will study in the next chapter.</p>
  <p>You can probably think of a couple of easy ways to implement a priority
            queue using sorting functions and lists. However, inserting into a list
            is <m>O(n)</m> and sorting a list is <m>O(n \log{n})</m>. We can
            do better. The classic way to implement a priority queue is using a data
            structure called a <term>binary heap</term>. A binary heap will allow us both
            to enqueue and dequeue items in <m>O(\log{n})</m>.</p>
  <p>The binary heap is interesting to study because when we diagram the heap
            it looks a lot like a tree, but when we implement it we use only a
            single list as an internal representation. The binary heap has two
            common variations: the <term>min heap</term>, in which the smallest key value is always
            at the front, and the <term>max heap</term>, in which the largest key value is
            always at the front. In this section we will implement the min heap. We
            leave a max heap implementation as an exercise.</p>
</section>
