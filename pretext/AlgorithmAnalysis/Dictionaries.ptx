<?xml version="1.0"?>
<section xml:id="algorithm-analysis_dictionaries">
  <title>Dictionaries</title>
  <p>The second major Python data structure is the dictionary. As you
            probably recall, dictionaries differ from lists in that you can access
            items in a dictionary by a key rather than a position. Later in this
            book you will see that there are many ways to implement a dictionary.
            The thing that is most important to notice right now is that the <c>get
item</c> and <c>set item</c> operations on a dictionary are <math>O(1)</math>. Another
            important dictionary operation is the <c>contains</c> operation. Checking to
            see whether a key is in the dictionary or not is also <math>O(1)</math>.
            The efficiency of all dictionary operations is summarized in
            <xref ref="algorithm-analysis_tbl-dictbigo"/>. One important side note on dictionary performance
            is that the efficiencies we provide in the table are for average
            performance. In some rare cases the <c>contains</c>, <c>get item</c>, and <c>set item</c>
            operations can degenerate into <math>O(n)</math> performance, but we will
            get into that in Chapter 8 when we talk about the different ways
            that a dictionary could be implemented.</p>
  <table xml:id="algorithm-analysis_id1">
    <tabular>
      <title>
        <term>Table 3: Big O Efficiency of Python Dictionary Operations</term>
      </title>
      <row header="yes">
        <cell>
                            Operation
                        </cell>
        <cell>
                            Big O Efficiency
                        </cell>
      </row>
      <row>
        <cell>
          <c>copy</c>
        </cell>
        <cell>
                            O(n)
                        </cell>
      </row>
      <row>
        <cell>
          <c>get item</c>
        </cell>
        <cell>
                            O(1)
                        </cell>
      </row>
      <row>
        <cell>
          <c>set item</c>
        </cell>
        <cell>
                            O(1)
                        </cell>
      </row>
      <row>
        <cell>
          <c>delete item</c>
        </cell>
        <cell>
                            O(1)
                        </cell>
      </row>
      <row>
        <cell>
          <c>contains (in)</c>
        </cell>
        <cell>
                            O(1)
                        </cell>
      </row>
      <row>
        <cell>
          <c>iteration</c>
        </cell>
        <cell>
                            O(n)
                        </cell>
      </row>
    </tabular>
  </table>
  <p>For our last performance experiment we will compare the performance of
            the contains operation between lists and dictionaries. In the process we
            will confirm that the contains operator for lists is <math>O(n)</math> and
            the contains operator for dictionaries is <math>O(1)</math>. The experiment
            we will use to compare the two is simple: we'll make a list with a range
            of numbers in it, then we will pick numbers at random and check to see
            if the numbers are in the list. If our performance tables are correct,
            the bigger the list, the longer it should take to determine if any one
            number is contained in the list.</p>
  <p>We will repeat the same experiment for a dictionary that contains
            numbers as the keys. In this experiment we should see that determining
            whether or not a number is in the dictionary is not only much faster,
            but the time it takes to check should remain constant even as the
            dictionary grows larger.</p>
  <p><xref ref="algorithm-analysis_lst-listvdict"/> implements this comparison. Notice that we are
            performing exactly the same operation, <c>number in container</c>. The
            difference is that on line 8 <c>x</c> is a list, and on line 10 <c>x</c> is a
            dictionary.</p>
  <p xml:id="algorithm-analysis_lst-listvdict" names="lst_listvdict">
    <term>Listing 6</term>
  </p>
  <program language="python">
    <input>
import timeit
import random

print(f"{'n':10s}{'list':&gt;10s}{'dict':&gt;10s}")
for i in range(10_000, 1_000_001, 20_000):
    t = timeit.Timer(f"random.randrange({i}) in x",
    "from __main__ import random, x")
    x = list(range(i))
    lst_time = t.timeit(number=1000)
    x = {j: None for j in range(i)}
    dict_time = t.timeit(number=1000)
    print(f"{i:&lt;10,}{lst_time:&gt;10.3f}{dict_time:&gt;10.3f}")
</input>
  </program>
  <p><xref ref="i10_id2fig-listvdict"/> summarizes the results of running
            <xref ref="algorithm-analysis_lst-listvdict"/>. You can see that the dictionary is consistently
            faster. For the smallest list size of 10,000 elements a dictionary is
            89.4 times faster than a list. For the largest list size of 990,000
            elements the dictionary is 11,603 times faster! You can also see that
            the time it takes for the <c>contains</c> operator on the list grows linearly
            with the size of the list. This verifies the assertion that the <c>contains</c>
            operator on a list is <math>O(n)</math>. It can also be seen that the time
            for the <c>contains</c> operator on a dictionary is constant even as the
            dictionary size grows. In fact, for a dictionary size of 10,000 the
            <c>contains</c> operation took 0.004 milliseconds, and for the dictionary size
            of 990,000 it also took 0.004 milliseconds.</p>
  <figure align="" xml:id="i10_id2fig-listvdict">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Comparing the <literal>in</literal> Operator for Python Lists and Dictionaries</caption>
    <image source="AlgorithmAnalysis/Figures/listvdict.png" width="50%"/>
  </figure>
  <p>Since Python is an evolving language, there are always changes going on
            behind the scenes. The latest information on the performance of Python
            data structures can be found on the Python website. As of this writing
            the Python wiki has a nice <term>time complexity</term> page that can be found at the
            <url href="http://wiki.python.org/moin/TimeComplexity" visual="http://wiki.python.org/moin/TimeComplexity">Time Complexity Wiki</url>.</p>
  <note>
    <title>Self Check</title>
    <exercise label="mcpyperform">
      <statement>
        <p>Q-1: Which of the list operations shown below is not O(1)?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>a_list.pop(0)</p>
          </statement>
          <feedback>
            <p>When you remove the first element of a list, all the other elements of the list must be shifted forward.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a_list.pop()</p>
          </statement>
          <feedback>
            <p>Removing an element from the end of the list is a constant operation.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a_list.append()</p>
          </statement>
          <feedback>
            <p>Appending to the end of the list is a constant operation</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a_list[10]</p>
          </statement>
          <feedback>
            <p>Indexing a list is a constant operation</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>all of the above are O(1)</p>
          </statement>
          <feedback>
            <p>There is one operation that requires all other list elements to be moved.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="mcpydictperf">
      <statement>
        <p>Q-2: Which of the dictionary operations shown below is O(1)?</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>"x" in a_dict</p>
          </statement>
          <feedback>
            <p>in is a constant operation for a dictionary because you do not have to iterate but there is a better answer.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>del a_dict["x"]</p>
          </statement>
          <feedback>
            <p>deleting an element from a dictionary is a constant operation but there is a better answer.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a_dict["x"] == 10</p>
          </statement>
          <feedback>
            <p>Assignment to a dictionary key is constant but there is a better answer.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a_dict["x"] = a_dict["x"] + 1</p>
          </statement>
          <feedback>
            <p>Re-assignment to a dictionary key is constant but there is a better answer.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>all of the above are O(1)</p>
          </statement>
          <feedback>
            <p>The only dictionary operations that are not O(1) are those that require iteration.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </note>
  <video xml:id="pythonopsperf" youtube="zKq8iVEX6gU" width="auto"/>
</section>
